{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","components/Loader.jsx","components/LinksList.jsx","pages/LinksPage.jsx","pages/CreatePage.jsx","components/LinkCard.jsx","pages/DetailPage.jsx","pages/AuthPage.jsx","hooks/message.hook.js","components/Navbar.jsx","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuth","Loader","className","LinksList","links","length","map","link","index","key","_id","href","from","target","rel","to","LinksPage","props","setLinks","useContext","fetchLinks","Authorization","fetched","useEffect","CreatePage","history","useHistory","auth","setLink","pressHandler","e","push","style","paddingTop","name","id","type","autoComplete","onChange","value","onKeyPress","htmlFor","LinkCard","console","log","clicks","Date","date","toLocaleDateString","require","DetailPage","linkId","useParams","getLink","AuthPage","text","window","M","toast","html","email","password","form","setForm","changeHandler","registerHandler","loginHandler","marginRight","disabled","onClick","Navbar","padding","event","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","exact","path","render","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f9c48003.chunk.js","sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Something wrong')\r\n            }\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, request, error, clearError}\r\n}","import {createContext} from 'react'\r\n\r\nfunction noop (){}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuth: false,\r\n})\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"progress\">\r\n            <div className=\"indeterminate\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst LinksList = ({links}) => {\r\n    if (!links.length) {\r\n        return <p className='center'>No links</p>\r\n    }\r\n\r\n    return <>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th>â„–</th>\r\n                <th>Original</th>\r\n                <th>Cutted</th>\r\n                <th>Detail</th>\r\n            </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n            {links.map((link, index) => {\r\n                return <tr key={link._id}>\r\n                    <td>{index + 1}</td>\r\n                    <td><a href={link.from} target='_blank' rel=\"noopener noreferrer\">{link.from}</a></td>\r\n                    <td><a href={link.to} target='_blank' rel=\"noopener noreferrer\">{link.to}</a></td>\r\n                    <td>\r\n                        <Link to={`/detail/${link._id}`}>Info</Link>\r\n                    </td>\r\n                </tr>\r\n            })}\r\n\r\n            </tbody>\r\n        </table>\r\n    </>\r\n}\r\n\r\nexport default LinksList","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport Loader from \"../components/Loader\";\r\nimport LinksList from \"../components/LinksList\";\r\n\r\n\r\nconst LinksPage = (props) => {\r\n    const [links, setLinks] = useState([])\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n\r\n    const fetchLinks = useCallback(async () => {\r\n        try {\r\n            const fetched = await request ('/api/link', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLinks(fetched)\r\n        } catch (e) {}\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchLinks()\r\n    }, [fetchLinks])\r\n\r\n    if (loading) return <Loader />\r\n\r\n    return <>\r\n        {!loading && <LinksList links={links} />}\r\n    </>\r\n}\r\n\r\nexport default LinksPage","import React, {useContext, useState} from 'react'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst CreatePage = (props) => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n    const [link, setLink] = useState('')\r\n    const {request} = useHttp()\r\n\r\n    const pressHandler = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            try {\r\n                const data = await request('/api/link/generate', 'POST', {from: link}, {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                })\r\n                history.push(`/detail/${data.link._id}`)\r\n            } catch(e) {}\r\n        }\r\n    }\r\n\r\n\r\n    return <div className='row'>\r\n        <div className=\"col s8 offset-s2\" style={{paddingTop: '2rem'}}>\r\n            <h4 className='center'>Create link</h4>\r\n            <div className=\"input-field\">\r\n                <input name=\"link\"\r\n                       id=\"link\"\r\n                       type=\"text\"\r\n                       autoComplete='none'\r\n                       onChange={e => setLink(e.target.value)}\r\n                       onKeyPress={pressHandler}\r\n                       value={link}\r\n                />\r\n                <label htmlFor=\"link\">Enter your link</label>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default CreatePage","import React from 'react'\r\n\r\nconst LinkCard = ({link}) => {\r\n    console.log(link)\r\n    return <>\r\n        <h2>Link</h2>\r\n        <p>Your cut url: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a></p>\r\n        <p>Source: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a></p>\r\n        <p>Transitions: <strong>{link.clicks}</strong></p>\r\n        <p>Create data: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\r\n    </>\r\n}\r\n\r\nexport default LinkCard","import React, {useCallback, useContext, useState} from 'react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport Loader from \"../components/Loader\";\r\nimport LinkCard from \"../components/LinkCard\";\r\n\r\nconst {useEffect} = require(\"react\");\r\n\r\nconst DetailPage = (props) => {\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const [link, setLink] = useState(null)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLink(fetched)\r\n            console.log(fetched)\r\n        } catch (e) {\r\n\r\n        }\r\n    }, [token, linkId, request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    }, [getLink])\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n    return <>\r\n        {!loading && link && <LinkCard link={link}/>}\r\n    </>\r\n}\r\n\r\nexport default DetailPage","import React, {useContext, useEffect, useState} from 'react'\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nconst AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage()\r\n    const {loading, error, request, clearError} = useHttp()\r\n    const [form, setForm] = useState({\r\n        email: '', password: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        message(error)\r\n        clearError()\r\n    }, [error, message, clearError])\r\n\r\n    const changeHandler = (e) => {\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            message(data.message)\r\n        } catch (e) {\r\n        }\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            auth.login(data.token, data.userId)\r\n            message(data.message)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    return <div className=\"row\">\r\n        <div className=\"col s6 offset-s3\">\r\n            <h1 className=\"center\">Cut url</h1>\r\n            <div className=\"card blue darken-4\">\r\n                <div className=\"card-content white-text\">\r\n                    <span className=\"card-title\">Authorize</span>\r\n                    <div>\r\n                        <div className=\"input-field\">\r\n                            <input name=\"email\"\r\n                                   id=\"email\"\r\n                                   type=\"email\"\r\n                                   autoComplete='none'\r\n                                   onChange={changeHandler}\r\n                                   value={form.email}\r\n                                   className=\"validate white-text\"/>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <input name=\"password\"\r\n                                   id=\"password\"\r\n                                   type=\"password\"\r\n                                   autoComplete='none'\r\n                                   onChange={changeHandler}\r\n                                   value={form.password}\r\n                                   className=\"validate white-text\"/>\r\n                            <label htmlFor=\"password\">Password</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                    <button className='btn amber darken-4'\r\n                            style={{marginRight: '10px'}}\r\n                            disabled={loading}\r\n                            onClick={loginHandler}\r\n                    >Log in\r\n                    </button>\r\n                    <button className='btn grey lighten-3 black-text'\r\n                            onClick={registerHandler}\r\n                            disabled={loading}\r\n                    >Register\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default AuthPage","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () => {\r\n    return useCallback(text => {\r\n        if (window.M && text) {\r\n            window.M.toast({ html: text })\r\n        }\r\n    }, [])\r\n}","import React, {useContext} from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nconst Navbar = () => {\r\n    const auth = useContext(AuthContext)\r\n\r\n    const logoutHandler = (event) => {\r\n        event.preventDefault()\r\n        auth.logout()\r\n    }\r\n\r\n    return <nav>\r\n        <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem'}}>\r\n            <span href=\"#\" className=\"brand-logo\">Cut url</span>\r\n            <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n\r\n                <li><NavLink to=\"/create\">Create</NavLink></li>\r\n                <li><NavLink to=\"/links\">Links</NavLink></li>\r\n                <li><a href=\"/\" onClick={logoutHandler}>Logout</a></li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport {useRoutes} from \"./routes\"\r\nimport {BrowserRouter} from \"react-router-dom\"\r\nimport {useAuth} from \"./hooks/auth.hook\"\r\nimport 'materialize-css'\r\nimport {AuthContext} from \"./context/AuthContext\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Loader from \"./components/Loader\";\r\n\r\nfunction App() {\r\n    const {login, logout, token, userId, ready} = useAuth()\r\n    const isAuth = !!token\r\n    const routes = useRoutes(isAuth);\r\n\r\n    if (!ready) {\r\n        return <Loader />\r\n    }\r\n\r\n    return <AuthContext.Provider value={{\r\n        token, login, logout, userId, isAuth\r\n    }}>\r\n        <BrowserRouter>\r\n            {isAuth && <Navbar />}\r\n            <div className='container'>\r\n                {routes}\r\n            </div>\r\n        </BrowserRouter>\r\n    </AuthContext.Provider>\r\n}\r\n\r\nexport default App;\r\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId] = useState(null)\r\n\r\n    const login = useCallback((jwtToken, id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        \r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken\r\n        }))\r\n    }, [])\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token) {\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    }, [login])\r\n\r\n    return {login, logout, token, userId, ready}\r\n}","import React from 'react'\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport LinksPage from \"./pages/LinksPage\";\r\nimport CreatePage from \"./pages/CreatePage\";\r\nimport DetailPage from \"./pages/DetailPage\";\r\nimport AuthPage from \"./pages/AuthPage\";\r\n\r\nexport const useRoutes = (isAuth) => {\r\n    if (isAuth) {\r\n        return <Switch>\r\n            <Route exact path=\"/links\" render={() => <LinksPage/>}/>\r\n            <Route exact path=\"/create\" render={() => <CreatePage/>}/>\r\n            <Route exact path=\"/detail/:id\" render={() => <DetailPage/>}/>\r\n            <Redirect to=\"/create\"/>\r\n        </Switch>\r\n    }\r\n\r\n    return <Switch>\r\n        <Route exact path=\"/\" render={() => <AuthPage/>}/>\r\n        <Redirect to=\"/\"/>\r\n    </Switch>\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}